{{>header}}

{{#if imports}}
{{#each imports}}
import type { {{{this}}} } from '../models/{{{this}}}';
{{/each}}
{{/if}}
import { ApiRequestOptions } from '../core/ApiRequestOptions';
import { request as __request } from '../core/request';
import { ApiOptions } from '../core/ApiOptions';

export class {{{name}}} {

    private readonly config: ApiOptions;

    /**
     * creates a new service
     * @param config the configuration to use
     */
    public constructor(config: ApiOptions) {
        this.config = config;
    }

    {{#each operations}}
    /**
    {{#if deprecated}}
     * @deprecated
    {{/if}}
    {{#if summary}}
     * {{{summary}}}
    {{/if}}
    {{#if description}}
     * {{{description}}}
    {{/if}}
    {{#unless @root.useOptions}}
    {{#if parameters}}
    {{#each parameters}}
     * @param {{{name}}} {{{description}}}
    {{/each}}
    {{/if}}
    {{/unless}}
    {{#each results}}
     * @returns {{{type}}} {{{description}}}
    {{/each}}
     * @throws ApiError
     */
    public async {{{name}}}({{>parameters}}): Promise<{{>result}}> {
        const options = this.{{{name}}}ApiRequestOptions(
            {{~#if parameters.length~}}
            {
            {{#each parameters}}
                {{{name}}}: {{{name}}},
            {{/each}}
            }
            {{/if}}
        );
        const result = await __request(options);
        return result.body;
    }

    /**
    {{#if deprecated}}
     * @deprecated
    {{/if}}
     * **used to get the request options without making a http request**
    {{#if summary}}
     * {{{summary}}}
    {{/if}}
    {{#if description}}
     * {{{description}}}
    {{/if}}
    {{#unless @root.useOptions}}
    {{#if parameters}}
    {{#each parameters}}
     * @param {{{name}}} {{{description}}}
    {{/each}}
    {{/if}}
    {{/unless}}
     * @returns ApiRequestOptions the request options to fulfill a http request
     * @throws ApiError
     */
    public {{{name}}}ApiRequestOptions({{>parameters}}): ApiRequestOptions {
        return {
            ...this.config,
            method: '{{{method}}}',
            path: `{{{path}}}`,
            {{#if parametersCookie}}
            cookies: {
                {{#each parametersCookie}}
                '{{{prop}}}': {{{name}}},
                {{/each}}
            },
            {{/if}}
            {{#if parametersHeader}}
            headers: {
                {{#each parametersHeader}}
                '{{{prop}}}': {{{name}}},
                {{/each}}
            },
            {{/if}}
            {{#if parametersQuery}}
            query: {
                {{#each parametersQuery}}
                '{{{prop}}}': {{{name}}},
                {{/each}}
            },
            {{/if}}
            {{#if parametersForm}}
            formData: {
                {{#each parametersForm}}
                '{{{prop}}}': {{{name}}},
                {{/each}}
            },
            {{/if}}
            {{#if parametersBody}}
            body: {{{parametersBody.name}}},
            {{#if parametersBody.mediaType}}
            mediaType: '{{{parametersBody.mediaType}}}',
            {{/if}}
            {{/if}}
            {{#if responseHeader}}
            responseHeader: '{{{responseHeader}}}',
            {{/if}}
            {{#if errors}}
            errors: {
                {{#each errors}}
                {{{code}}}: `{{{description}}}`,
                {{/each}}
            },
            {{/if}}
        };
    }

    {{/each}}
}