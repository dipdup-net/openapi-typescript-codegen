function formatSelector(s: any, v: any): [string, string] {
    if (v instanceof Date) {
        return [s, (v as Date).toISOString()];
    } else if (Array.isArray(v)) {
        return [s, Array(v).join(',')];
    } else if (typeof v === 'object' && v.jsonValue) {
        if (v.jsonPath) {
            return formatSelector(`${v.jsonPath}.${s}`, v.jsonValue);
        } else {
            return formatSelector(s, v.jsonValue);
        }
    } else {
        return [String(s), String(v)];
    }
};

function getQueryString(params: Record<string, any>): string {
    const qs: string[] = [];
    Object.keys(params).forEach(key => {
        const value = params[key];
        if (isDefined(value)) {
            if (Array.isArray(value)) {
                value.forEach(value => {
                    qs.push(`${encodeURIComponent(key)}=${encodeURIComponent(String(value))}`);
                });
            } else if (typeof value === 'object') {
                switch (key) {
                    case 'anyof': {
                        qs.push(`${encodeURIComponent(key)}`);
                        if (value.fields) {
                            qs.push(`.${encodeURIComponent(Array(value.fileds).join('.'))}`);
                        }
                        qs.push(`=`);
                        if (value.value) {
                            qs.push(`${encodeURIComponent(value.value)}`);
                        }
                    }
                    default: {
                        Object.entries(value).forEach(x => {
                            const [sel, val] = formatSelector(x[0], x[1]);
                            qs.push(`${encodeURIComponent(key)}.${encodeURIComponent(sel)}=${encodeURIComponent(val)}`);
                        });
                    }
                }
            } else {
                qs.push(`${encodeURIComponent(key)}=${encodeURIComponent(String(value))}`);
            }
        }
    });
    if (qs.length > 0) {
        return `?${qs.join('&')}`;
    }
    return '';
}
